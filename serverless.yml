# serverless.yml


service: wwf-lambda-sensui
# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'stg'}
  region: us-west-1 
  iamRoleStatements:
    - Effect: Allow
      Action:
      - KMS:Decrypt
      Resource: ${self:custom.kmsSecrets.keyArn}
    - Effect: Allow
      Action:
      - s3:*
      Resource: 'arn:aws:s3:::*'
    - Effect: Allow
      Action:
      - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: Allow
      Action:
      - "sqs:ChangeMessageVisibility"
      - "sqs:DeleteMessage"
      - "sqs:GetQueueAttributes"
      - "sqs:ReceiveMessage"
      - "sqs:SendMessage"
      - "sqs:GetQueueUrl"
      - "sqs:listQueues"
      - "lambda:CreateEventSourceMapping"
      - "lambda:ListEventSourceMappings"
      - "lambda:ListFunction"
      Resource: "*"

  environment:
      SECRETS: ${self:custom.kmsSecrets.secrets.SECRETS}


plugins:
  - serverless-kms-secrets
  #- serverless-webpack

  #stgQueue:
   #   Type: "AWS::SQS::Queue"
    #  Properties:
     #   QueueName: "stgQueue"
      #  VisibilityTimeout: 30 # 30 sec.
       # MessageRetentionPeriod: 60 # 60 sec.
        #RedrivePolicy:
         # deadLetterTargetArn:
          #  "Fn::GetAtt":
           #   - ReceiverDeadLetterQueue
            #  - Arn
          #maxReceiveCount: 5

resources:
  Resources:
    newstgApplicationQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "newstgApplicationQueue"
        VisibilityTimeout: 30 # 30 sec.
        MessageRetentionPeriod: 60 # 60 sec.
        RedrivePolicy:
          deadLetterTargetArn:
            "Fn::GetAtt":
              - ApplicationDeadLetterQueue
              - Arn
          maxReceiveCount: 2
    ApplicationDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "newstgApplicationDLQ"
        MessageRetentionPeriod: 1209600 # 14 days in seconds
    newstgChallengeQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "newstgChallengeQueue"
        VisibilityTimeout: 30 # 30 sec.
        MessageRetentionPeriod: 60 # 60 sec.
        RedrivePolicy:
          deadLetterTargetArn:
            "Fn::GetAtt":
              - ChallengeDeadLetterQueue
              - Arn
          maxReceiveCount: 2
    ChallengeDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "newstgChallengeDLQ"
        MessageRetentionPeriod: 1209600 # 14 days in seconds
  

custom:
  serverless-kms-secrets:
    secretsFile: kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml
  kmsSecrets: ${file(kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}
  #webpackIncludeModules: true

functions:
  #receiver:
   # handler: handler.receiver3
    #events:
     # - sqs:
      #    arn:
       #     Fn::GetAtt:
        #      - stgQueue
         #     - Arn
  getLogsApplication:
    handler: handler.getLogsApplication
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - newstgApplicationQueue
              - Arn
  getLogsChallenge:
    handler: handler.getLogsChallenge
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - newstgChallengeQueue
              - Arn
  allProjectDet:
    handler: handler.allProjectDet
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: allProjectDet
          method: get
          cors: true
  projectDet:
    handler: handler.projectDet
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: projectDet
          method: post
          cors: true
  projectsUser:
    handler: handler.projectsUser
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: projectsUser
          method: post
          cors: true
  createProject:
    handler: handler.createProject
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: createProject
          method: post
          cors: true
  createProjectS3:
    handler: handler.createProjectS3
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: createProjectS3
          method: post
          cors: true
  createUser:
    handler: handler.createUser
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: createUser
          method: post
          cors: true
  updateUserCreds:
    handler: handler.updateUserCreds
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: updateUserCreds
          method: post
          cors: true
  user:
    handler: handler.user
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: user
          method: post
          cors: true
  userLogin:
    handler: handler.userLogin
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: userLogin
          method: post
          cors: true
  promoteProject:
    handler: handler.promoteProject
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: promoteProject
          method: post
          cors: true
  confirmProject:
    handler: handler.confirmProject
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: confirmProject
          method: post
          cors: true
  revertPromoteProject:
    handler: handler.revertPromoteProject
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: revertPromoteProject
          method: post
          cors: true
  createAccount:
    handler: handler.createAccount
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: createAccount
          method: post
          cors: true
  challenge:
    handler: handler.challenge
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: challenge
          method: post
          cors: true
  revertChallenge:
    handler: handler.revertChallenge
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: revertChallenge
          method: post
          cors: true
  confirmChallenge:
    handler: handler.confirmChallenge
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: confirmChallenge
          method: post
          cors: true
  commitVote:
    handler: handler.commitVote
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: commitVote
          method: post
          cors: true
  revertCommitVote:
    handler: handler.revertCommitVote
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: revertCommitVote
          method: post
          cors: true
  confirmCommitVote:
    handler: handler.confirmCommitVote
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: confirmCommitVote
          method: post
          cors: true
  challengeConclusion:
    handler: handler.challengeConclusion
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: challengeConclusion
          method: post
          cors: true
    timeout: 30
  revealVote:
    handler: handler.revealVote
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: revealVote
          method: post
          cors: true
    timeout: 30
  confirmRevealVote:
    handler: handler.confirmRevealVote
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: confirmRevealVote
          method: post
          cors: true
    timeout: 30
  



